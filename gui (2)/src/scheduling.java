
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.Spinner;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class scheduling extends javax.swing.JFrame {
    public static Vector<Vector<String>> v=new Vector<Vector<String>>( );
    /**
     * Creates new form scheduling
     */
    public scheduling() {
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Schedule a Task");
         //JSpinner spinner = new JSpinner();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Time = new javax.swing.JLabel();
        addURL = new javax.swing.JLabel();
        schedule = new javax.swing.JButton();
        add_task = new javax.swing.JTextField();
        Date date=new Date();
        SpinnerDateModel sm=new SpinnerDateModel(date,null,null,Calendar.HOUR_OF_DAY);
        time = new javax.swing.JSpinner(sm);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Time.setText("Time");

        addURL.setText("Add URL");

        schedule.setText("Schedule :D");
        schedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scheduleActionPerformed(evt);
            }
        });

        //Spinner
        JSpinner.DateEditor de=new JSpinner.DateEditor(time, "HH:mm:ss");
        time.setEditor(de);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(schedule, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(178, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(Time, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(time, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(add_task))
                .addGap(70, 70, 70))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(37, 37, 37)
                    .addComponent(addURL, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(284, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(add_task, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Time, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(time)
                        .addGap(7, 7, 7)))
                .addGap(52, 52, 52)
                .addComponent(schedule, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(39, 39, 39)
                    .addComponent(addURL, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(227, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scheduleActionPerformed
         String url1=add_task.getText();
        try {
            URL url=new URL(url1);
        } catch (MalformedURLException ex) {
            Logger.getLogger(scheduling.class.getName()).log(Level.SEVERE, null, ex);
        }
       SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
       String tym=sdf.format(time.getValue());
     //
       //System.out.println(tym);
        Schedule(url1,tym);
   //System.out.println("hello scheduling");
    }//GEN-LAST:event_scheduleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(scheduling.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new scheduling().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Time;
    private javax.swing.JLabel addURL;
    private javax.swing.JTextField add_task;
    private javax.swing.JButton schedule;
    private javax.swing.JSpinner time;
    // End of variables declaration//GEN-END:variables
    private void Schedule(String url,String time )
    {
         URL verifiedURL=frame.verifyUrl(url);
       //  System.out.println("hello schedule");
         Vector<String>vs =new Vector<String>();
                if(verifiedURL!=null)
                {
                   
                       vs.addElement(new String(time));
                          vs.addElement(new String(url));
                       //vs.add(url);
                       v.addElement(new Vector(vs));
                         Collections.sort(v,new Comparator<Vector<String>>(){

                           @Override
                           public int compare(Vector<String> v1, Vector<String> v2) {
                         
                               return v1.get(0).compareTo(v2.get(0));
                           }
                             
                         });
                 
                } 
                else
                    JOptionPane.showMessageDialog(this,"Invalid Download URL","Error",JOptionPane.ERROR_MESSAGE);
              //  schedule obj=v.get(0);
               // System.out.println(v.size());
                //for(int i=0;i<v.size();i++)
                  //  System.out.println(v.get(i).get(0)+" "+v.get(i).get(1));
                  //   System.out.println(v.get(1).get(0)+" "+v.get(1).get(1));
    }



}
 class background extends Thread {
         

        public background() {
        }
        public void run()
        {
                URL verifiedURL=null;
        boolean running=true;
      //  static int  i=0;
        //System.out.println("run fun");
        while(running)
        {
           // System.out.println("run fun");
         //System.out.println(scheduling.v.size());
            if(scheduling.v.size()>0)
            {
                Calendar cal=Calendar.getInstance();
                SimpleDateFormat sdf=new SimpleDateFormat("HH:mm:ss");
                String tym=sdf.format(cal.getTime());
                //System.out.println(tym);
                while(scheduling.v.get(0).get(0).equals(tym))
                {
                    try {
                        verifiedURL=new URL(scheduling.v.get(0).get(1));
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                      frame.dataM.addDownload(new Download(verifiedURL,frame.pid));
                      scheduling.v.remove(0);
                     // i++;
                }
                //System.out.println();
                
            }
        }
        }
    }